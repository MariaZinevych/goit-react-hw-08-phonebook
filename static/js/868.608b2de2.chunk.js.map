{"version":3,"file":"static/js/868.608b2de2.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/icons/src/ViewOff.tsx","../node_modules/@chakra-ui/icons/src/View.tsx","components/FormRegister/FormRegister.js","pages/RegisterPage.js"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewOffIcon = createIcon({\n  displayName: \"ViewOffIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.2,10.549a20.954,20.954,0,0,0-4.3-3.6l4-3.995a1,1,0,1,0-1.414-1.414l-.018.018a.737.737,0,0,1-.173.291l-19.5,19.5c-.008.007-.018.009-.026.017a1,1,0,0,0,1.631,1.088l4.146-4.146a11.26,11.26,0,0,0,4.31.939h.3c4.256,0,8.489-2.984,11.051-5.8A2.171,2.171,0,0,0,23.2,10.549ZM16.313,13.27a4.581,4.581,0,0,1-3,3.028,4.3,4.3,0,0,1-3.1-.19.253.253,0,0,1-.068-.407l5.56-5.559a.252.252,0,0,1,.407.067A4.3,4.3,0,0,1,16.313,13.27Z\" />\n      <path d=\"M7.615,13.4a.244.244,0,0,0,.061-.24A4.315,4.315,0,0,1,7.5,12,4.5,4.5,0,0,1,12,7.5a4.276,4.276,0,0,1,1.16.173.244.244,0,0,0,.24-.062l1.941-1.942a.254.254,0,0,0-.1-.421A10.413,10.413,0,0,0,12,4.75C7.7,4.692,3.4,7.7.813,10.549a2.15,2.15,0,0,0-.007,2.9,21.209,21.209,0,0,0,3.438,3.03.256.256,0,0,0,.326-.029Z\" />\n    </g>\n  ),\n})\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: (\n    <g fill=\"currentColor\">\n      <path d=\"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" />\n      <circle cx=\"12\" cy=\"12\" r=\"2\" />\n    </g>\n  ),\n})\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { register } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  VStack,\n} from '@chakra-ui/react';\nimport { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string()\n    .matches(/^[A-Za-z\\s'-]+$/, 'Please enter a valid name.')\n    .required('Name is required!'),\n  email: yup\n    .string()\n    .email('Invalid email address.')\n    .required('Email is required!'),\n  password: yup\n    .string()\n    .min(8, 'Password must be at least 8 characters.')\n    .matches(\n      /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]+$/,\n      'Password must contain at least one letter, one number, and one special character'\n    )\n    .required('Password is required!'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match.')\n    .required('Confirm password is required!'),\n});\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const toggleShowPassword = () => setShowPassword(prev => !prev);\n  const toggleShowConfirmPassword = () => setShowConfirmPassword(prev => !prev);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema,\n    onSubmit: ({ name, email, password }) => {\n      dispatch(register({ name, email, password }));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex justify=\"center\" align=\"center\" h=\"100vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.name && formik.errors.name}\n          >\n            <FormLabel>Name</FormLabel>\n            <Input\n              name=\"name\"\n              type=\"text\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.name}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n\n            <FormErrorMessage>{formik.errors.name}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={2}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <InputGroup>\n              <Input\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n                variant=\"filled\"\n                focusBorderColor=\"purple.400\"\n              />\n              <InputRightElement>\n                <Button\n                  bg=\"transparent\"\n                  _hover={{ bg: 'none' }}\n                  onClick={toggleShowPassword}\n                >\n                  {showPassword ? (\n                    <ViewOffIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  ) : (\n                    <ViewIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  )}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={\n              formik.touched.confirmPassword && formik.errors.confirmPassword\n            }\n          >\n            <FormLabel>Confirm password</FormLabel>\n            <InputGroup>\n              <Input\n                name=\"confirmPassword\"\n                type={showConfirmPassword ? 'text' : 'password'}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.confirmPassword}\n                variant=\"filled\"\n                focusBorderColor=\"purple.400\"\n              />\n              <InputRightElement>\n                <Button\n                  bg=\"transparent\"\n                  _hover={{ bg: 'none' }}\n                  onClick={toggleShowConfirmPassword}\n                >\n                  {showConfirmPassword ? (\n                    <ViewOffIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  ) : (\n                    <ViewIcon\n                      color=\"purple.500\"\n                      _hover={{ color: 'purple.600' }}\n                    />\n                  )}\n                </Button>\n              </InputRightElement>\n            </InputGroup>\n            <FormErrorMessage>{formik.errors.confirmPassword}</FormErrorMessage>\n          </FormControl>\n\n          <Button type=\"submit\" w=\"full\">\n            Sign up\n          </Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default RegisterForm;","import React from 'react';\nimport RegisterForm from 'components/FormRegister/FormRegister';\n\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;"],"names":["_createContext","createContext","name","errorMessage","_createContext2","_slicedToArray","InputGroupStylesProvider","useInputGroupStyles","InputGroup","forwardRef","props","ref","styles","useMultiStyleConfig","_omitThemingProps","omitThemingProps","children","className","rest","_objectWithoutProperties","_excluded","_className","cx","groupStyles","validChildren","getValidChildren","input","field","forEach","child","_a","_b","type","id","paddingStart","height","h","paddingEnd","borderEndRadius","borderStartRadius","clones","map","theming","compact","size","variant","cloneElement","Object","assign","jsx","chakra","_objectSpread","__css","width","display","position","isolation","group","value","displayName","StyledInputElement","baseStyle","alignItems","justifyContent","top","zIndex","InputElement","_objectSpread2","_props$placement","placement","attr","elementStyles","_defineProperty","fontSize","element","InputLeftElement","_excluded2","InputRightElement","_excluded3","createIcon","options","_options$viewBox","viewBox","pathDefinition","d","_options$defaultProps","defaultProps","path","Children","Comp","Icon","length","fill","ViewOffIcon","jsxs","ViewIcon","cy","r","validationSchema","yup","matches","required","email","password","min","confirmPassword","oneOf","dispatch","useDispatch","_useState","useState","_useState2","showPassword","setShowPassword","_useState3","_useState4","showConfirmPassword","setShowConfirmPassword","formik","useFormik","initialValues","onSubmit","_ref","register","resetForm","_jsx","Flex","justify","align","Box","bg","p","rounded","w","boxShadow","_jsxs","VStack","as","spacing","noValidate","handleSubmit","FormControl","isRequired","mb","isInvalid","touched","errors","FormLabel","Input","onChange","handleChange","onBlur","handleBlur","values","focusBorderColor","FormErrorMessage","Button","_hover","onClick","prev","color","_Fragment","RegisterForm"],"sourceRoot":""}