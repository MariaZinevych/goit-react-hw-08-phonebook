{"version":3,"file":"static/js/381.6985263c.chunk.js","mappings":"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","sources":["components/FormLogin/FormLogin.js","pages/LoginPage.js","../node_modules/@chakra-ui/layout/src/text.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useFormik } from 'formik';\nimport { login } from 'redux/auth/authOperations';\nimport * as yup from 'yup';\nimport useAuth from 'hooks/useAuth';\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  Text,\n  VStack,\n} from '@chakra-ui/react';\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter valid email')\n    .required('Please enter your email address.'),\n  password: yup.string().required('Please enter your password.'),\n});\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const { error } = useAuth();\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema,\n    onSubmit: value => {\n      dispatch(login(value));\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Flex justify=\"center\" align=\"center\" h=\"75vh\">\n      <Box bg=\"white\" p={10} rounded=\"md\" w={500} boxShadow=\"xl\">\n        {error === 400 && (\n          <Text as=\"p\" color=\"red.500\" fontSize=\"sm\" lineHeight=\"normal\" mb={2}>\n            Incorrect email address or password.\n          </Text>\n        )}\n        <VStack as=\"form\" spacing={4} noValidate onSubmit={formik.handleSubmit}>\n          <FormControl\n            isRequired\n            mb={3}\n            isInvalid={formik.touched.email && formik.errors.email}\n          >\n            <FormLabel>Email</FormLabel>\n            <Input\n              name=\"email\"\n              type=\"email\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.email}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.email}</FormErrorMessage>\n          </FormControl>\n\n          <FormControl\n            isRequired\n            mb={5}\n            isInvalid={formik.touched.password && formik.errors.password}\n          >\n            <FormLabel>Password</FormLabel>\n            <Input\n              name=\"password\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.password}\n              variant=\"filled\"\n              focusBorderColor=\"purple.400\"\n            />\n            <FormErrorMessage>{formik.errors.password}</FormErrorMessage>\n          </FormControl>\n\n          <Button type=\"submit\" w=\"full\">\n            Login\n          </Button>\n        </VStack>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default LoginForm;","import React from 'react';\nimport LoginForm from 'components/FormLogin/FormLogin';\n\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"],"names":["validationSchema","yup","email","required","password","dispatch","useDispatch","error","useAuth","formik","useFormik","initialValues","onSubmit","value","login","resetForm","_jsx","Flex","justify","align","h","children","_jsxs","Box","bg","p","rounded","w","boxShadow","Text","as","color","fontSize","lineHeight","mb","VStack","spacing","noValidate","handleSubmit","FormControl","isRequired","isInvalid","touched","errors","FormLabel","Input","name","type","onChange","handleChange","onBlur","handleBlur","values","variant","focusBorderColor","FormErrorMessage","Button","_Fragment","LoginForm","forwardRef","props","ref","styles","useStyleConfig","_omitThemingProps","omitThemingProps","rest","className","decoration","casing","_objectWithoutProperties","_excluded","aliasedProps","compact","textAlign","textDecoration","textTransform","jsx","chakra","_objectSpread","cx","__css","displayName"],"sourceRoot":""}